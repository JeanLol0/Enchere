<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>fr.insa.strasbourg.zerr</groupId>
    <artifactId>projetEnchere</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>18</maven.compiler.source>
        <maven.compiler.target>18</maven.compiler.target>
        <exec.mainClass>fr.insa.strasbourg.zerr.enchereprojet.projetenchere.ProjetEnchere</exec.mainClass>
    </properties>


    <dependencies>
   
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.5.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-text -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-text</artifactId>
            <version>1.10.0</version>
        </dependency>
        
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>18</version>
        </dependency>
        
        <!-- https://mvnrepository.com/artifact/org.openjfx/javafx-web -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>18</version>
        </dependency>

    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.2.0</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
                <executions>
                    <!-- add all files exept .java from main sources :-->
                    <!-- ce n'est pas conforme à la convention maven, mais je trouve bien
                    pratique de placer les fichiers dont dépendent directement les sources
                    (exemple icones...) dans le même package (ou un sous dossier ex : images)
                    que les fichiers .java -->
                    <execution>
                        <id>copy-resources</id>
                        <!-- here the phase you need -->
                        <!-- liste des phases : voir http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference -->
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                            <resources>          
                                <resource>
                                    <directory>${basedir}/src/main/java</directory>
                                    <filtering>false</filtering>
                                    <excludes>
                                        <exclude>**/*.java</exclude>
                                    </excludes>
                                </resource>
                            </resources>              
                        </configuration>            
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.0</version>
            </plugin>
            
            <!-- voir https://github.com/openjfx/javafx-maven-plugin
            https://dev.to/cherrychain/javafx-jlink-and-jpackage-h9 
            maven goals : 
            pour run : javafx:run
            pour creer programme standalone : javafx:jlink 
            voir aussi JPackage pour une alternative avec jdk 16-->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <configuration>
                    <compress>2</compress>
                    <noHeaderFiles>true</noHeaderFiles>
                    <stripDebug>true</stripDebug>
                    <noManPages>true</noManPages>
                    <mainClass>fr.insa.strasbourg.zerr.projetEnchere.FX.MainFX</mainClass>
                    <launcher>TutoVideoDessin</launcher>
                    <jlinkImageName>amourFX</jlinkImageName>
                    <!-- pour zipper le dossier image
                     je ne le fais pas car je veux créer d'abord un raccourci vers le launcher
                                    <jlinkZipName>TutoVideoDessin</jlinkZipName>
                    -->
                    <vendor>FdB</vendor>
                </configuration>
                <executions>
                    <execution>
                        <!-- Default configuration for running -->
                        <!-- Usage: mvn clean javafx:run -->
                        <id>default-cli</id>
                    </execution>
                </executions>
            </plugin>        


        </plugins>
        
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <filtering>false</filtering>
                <includes>
                    <include>**/*.png</include>
                </includes>
                <excludes>
                    <exclude>**/*.java</exclude>
                </excludes>
            </resource>
        </resources>
    </build> 
    <name>Enchere</name>
</project>